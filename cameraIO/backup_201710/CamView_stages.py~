# -*- coding: utf-8 -*-
"""
Created on Wed Jul 26 12:02:05 2017

@author: OPID13
"""


import sys, os
import matplotlib.pyplot as plt
import numpy as np

# local imports
path_list = os.path.dirname(__file__).split(os.path.sep)
importpath_list = []
if 'skript' in path_list:
    for folder in path_list:
        importpath_list.append(folder)
        if folder == 'skript':
            break
importpath = os.path.sep.join(importpath_list)
sys.path.append(importpath)        

from fileIO.images.image_tools import optimize_greyscale
import fileIO.images.image_tools as it
from simplecalc.slicing import troi_to_slice
import cameraIO.BaslerGrab as bg
from SpecClient import SpecCommand, SpecMotor
import simplecalc.centering as cen
import simplecalc.image_align as ia
import simplecalc.fitting as fit
import fileIO.plots.plot_array as pa
import fileIO.datafiles.save_data as save_data
import fileIO.datafiles.open_data as open_data
from cameraIO.CamView_tools import stage

        
class motexplore_jul17(stage):
    def __init__(self, specsession = 'motexplore', initialize_cameras = True):
        if initialize_cameras:
            self.initialize_cameras(plot=False)
        
        # dictionary connecting function of the motor and its specname:
        self.motors      = {}
        motor_dict = {'x'    : 'navix',
                      'y'    : 'naviy',
                      'z'    : 'naviz', 
                      'rotz' : 'srotz'}
        self._add_motors(**motor_dict)

        # contains the definition of the stage geometry:
        self.stagegeomety = {}
        
        # lists of motors that will move the rotation axis for centering
        # self.stagegeomety['COR_motors'] = {'rotation':['y','x']} # ORDER MATTERS!
        self.stagegeomety['COR_motors'] = {'rotz':['x','y']} # ORDER MATTERS!

        # connect to spec
        self.connect(specsession = specsession)

        # initializing the default COR at the current motor positions
        self.COR = {}
        [self.COR.update({motor:[self.wm(a),self.wm(b)]}) for motor,[a,b] in self.stagegeomety['COR_motors'].items()]
        
        # dicts of motors that can have the same calibration:
        # level 1 : which view (side or top)
        # level 2 : group of motors (any name, here 'set1'
        # level 3 : the motors with relative calibration factors (here 1)
        
        self.stagegeomety['same_calibration'] = {}
        self.stagegeomety['same_calibration']['side'] = {'set1':{'x':1,'y':1}}
        self.stagegeomety['same_calibration']['top']  = {'set1':{'x':1,'y':1}}

        
        self.calibration = {}
        self.calibration.update({'side':{}})
        self.calibration.update({'top':{}})
        print 'setting default calibration for zoomed out microscopes'
        self._calibrate('y',-1495.4,'side')
        self._calibrate('y',1495.4,'top')
        self._calibrate('z',-914.02,'side')

        # General point of reference
        self.cross_pxl = [600,1000]

        # lookuptables:
        self.lookup = {}
        
        # lookuptables look like this:
        # self.lookup[motor] = {} # look up dict for <motor>
        # self.lookup[motor].update({motor: thetas})  ## IMPORTANT, all defined lookup positions are referenced to the SAME positions for <motor>, here <thetas>
        # self.lookup[motor].update({mot0: shift[:,0]*self.calibration[view][mot0]})
        # self.lookup[motor].update({mot1: shift[:,1]*self.calibration[view][mot1]})

        ## else we assume that all motors are correctly defined in the self.lookup[motor] dict!



        
class sm3_oct17(stage):
    def __init__(self, specsession = 'navitar', initialize_cameras = True):
        if initialize_cameras:
            self.initialize_cameras(plot=False)
        
        # dictionary connecting function of the motor and its specname:
        self.motors      = {}
        motor_dict = {'x'    : 'navix',
                      'y'    : 'naviy',
                      'z'    : 'naviz', 
                      'rotz' : 'sm3'}
        self._add_motors(**motor_dict)

        # contains the definition of the stage geometry:
        self.stagegeomety = {}
        
        # lists of motors that will the rotation axis for centering
        # self.stagegeomety['COR_motors'] = {'rotation':['y','x']} # ORDER MATTERS!
        self.stagegeomety['COR_motors'] = {'rotz':['x','y']} # ORDER MATTERS!

        # connect to spec
        self.connect(specsession = specsession)
        # initializing the default COR at the current motor positions
        self.COR = {}
        [self.COR.update({motor:[self.wm(a),self.wm(b)]}) for motor,[a,b] in self.stagegeomety['COR_motors'].items()]

        # dicts of motors that can have the same calibration:
        # level 1 : which view (side or top)
        # level 2 : group of motors (any name, here 'set1'
        # level 3 : the motors with relative calibration factors (here 1)
        
        self.stagegeomety['same_calibration'] = {}
        self.stagegeomety['same_calibration']['side'] = {}
        self.stagegeomety['same_calibration']['top']  = {}
        self.stagegeomety['same_calibration']['side'].update({'set1':{'x':1,'y':1}})
        self.stagegeomety['same_calibration']['top'].update({'set1':{'x':1,'y':1}})

        print("self.stagegeomety['same_calibration']['side']: ",self.stagegeomety['same_calibration']['side'])

        
        
        self.calibration = {}
        self.calibration.update({'side':{}})
        self.calibration.update({'top':{}})
        print 'setting default calibration for zoomed out microscopes'
        self._calibrate('y',-1495.4,'side')
        self._calibrate('y',1495.4,'top')
        self._calibrate('z',-914.02,'side')

        # General point of reference
        self.cross_pxl = [600,1000]

        # lookuptables:
        self.lookup = {}
        
        # lookuptables look like this:
        # self.lookup[motor] = {} # look up dict for <motor>
        # self.lookup[motor].update({motor: thetas})  ## IMPORTANT, all defined lookup positions are referenced to the SAME positions for <motor>, here <thetas>
        # self.lookup[motor].update({mot0: shift[:,0]*self.calibration[view][mot0]})
        # self.lookup[motor].update({mot1: shift[:,1]*self.calibration[view][mot1]})

        ## else we assume that all motors are correctly defined in the self.lookup[motor] dict!


