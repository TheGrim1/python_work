import h5py
import numpy as np
import matplotlib.pyplot as plt
import sys, os
from multiprocessing import Pool
sys.path.append('/data/id13/inhouse2/AJ/skript')
from pythonmisc.worker_suicide import worker_init


def do_plot_loopscan(scanname, source_h5, index):
    save_fname = '/hz/data/id13/inhouse10/THEDATA_I10_1/d_2018-07-30_commi_BLISS_aj/PROCESS/vlm/{}/plots/'.format(scanname)+'{}_pos_{:04d}.png'.format(scanname,index)

    save_path = os.path.dirname(save_fname)
    if not os.path.exists(save_path):
        os.mkdir(save_path)

    fig, axes = plt.subplots(1,3)

    fig.set_tight_layout(True)
    fig.set_figheight(3.5)
    fig.set_figwidth(12)

    for axis in axes.flatten():
        axis.tick_params(axis='both',direction='in')
    ## the real image
    axes[0].set_title('camera image')
    axes[0].matshow(source_h5['entry/image/frames'][index][::-1], vmin=10, vmax=110)
    axes[0].set_xlabel('y_pxl')
    axes[0].set_ylabel('z_pxl')
    
    ## the position
    axes[1].set_title('position yz')
    axes[1].set_xlabel('y position [um]')
    axes[1].set_ylabel('z position [um]')
    axes[1].set_xlim(-0.4,0.4)
    axes[1].set_ylim(-0.4,0.4)

    for i in range(max(0,index-1000),index):
        y_pos = source_h5['entry/positions/del_x'][i]
        z_pos = source_h5['entry/positions/del_z'][i]
        axes[1].plot(y_pos,z_pos,'bo')

    y_pos = source_h5['entry/positions/del_x'][index]
    z_pos = source_h5['entry/positions/del_z'][index]
    axes[1].plot(y_pos,z_pos,'rx')
    
    ## the analysed angle positions and phases
    axes[2].set_title('y position vs time')
    axes[2].set_xlabel('time [s]')
    axes[2].set_ylabel('y position [deg]')
    axes[2].set_ylim(-0.4,0.4)
    time_arr = np.asarray(source_h5['entry/positions/time_of_day'])
    end_time = time_arr.flatten()[-1]
    start_time = time_arr.flatten()[0]
    axes[2].set_xlim(0,end_time-start_time)

    axes[2].plot(time_arr[:index]-start_time,source_h5['entry/positions/del_x'][:index])

    print('saving {}'.format(save_fname))
    plt.savefig(save_fname,transparent=True)
    plt.close('all')

    

def do_plot_kmap(scanname,source_h5, index):
    save_fname = '/hz/data/id13/inhouse10/THEDATA_I10_1/d_2018-07-30_commi_BLISS_aj/PROCESS/vlm/{}/plots/'.format(scanname)+'{}_pos_{:04d}_{:04d}.png'.format(scanname,index[0],index[1])

    save_path = os.path.dirname(save_fname)
    if not os.path.exists(save_path):
        os.mkdir(save_path)

    fig, axes = plt.subplots(1,3)

    fig.set_tight_layout(True)
    fig.set_figheight(3.5)
    fig.set_figwidth(12)

    for axis in axes.flatten():
        axis.tick_params(axis='both',direction='in')
    
    ## the real image
    axes[0].set_title('camera image')
    axes[0].matshow(source_h5['entry/image/frames'][index], vmin=10, vmax=120)
    axes[0].set_xlabel('y_pxl')
    axes[0].set_ylabel('z_pxl')
    
    ## the position
    axes[1].set_title('discrepency from nominal position x')
    axes[1].set_xlabel('scan position y [um]')
    axes[1].set_ylabel('scan position z [um]')
    axes[1].set_xlim(-0.4,0.4)
    axes[1].set_ylim(-0.4,0.4)


    ## the analysed angle positions and phases
    axes[2].set_title('y position vs time')
    axes[2].set_ylabel('time [s]')
    axes[2].set_xlabel('y position [deg]')
    axes[2].set_xlim(-0.4,0.4)
    end_time = source_h5['entry/positions/time_of_day'].flatten[-1]
    start_time = source_h5['entry/positions/time_of_day'].flatten[0]
    axes[2].set_ylim(0,end_time)
    
    for i in range(index[0]):
        for j in range(100):

            phi = source_h5['entry/fft_source/phi'][i,j]
            kappa = source_h5['entry/fft_source/kappa'][i,j]

            axes[2].plot(kappa,phi,'bx')
            axes[1,1].plot(i*100+j,source_h5['entry/fft_source/phase'][i,j],'bo')

    i = index[0]
    for j in range(index[1]):
        phi = source_h5['entry/fft_source/phi'][i,j]
        kappa = source_h5['entry/fft_source/kappa'][i,j]
        
        axes[1,0].plot(kappa,phi,'bx')
        axes[1,1].plot(i*100+j,source_h5['entry/fft_source/phase'][i,j],'bo')
        
    j = index[1]
    phi = source_h5['entry/fft_source/phi'][i,j]
    kappa = source_h5['entry/fft_source/kappa'][i,j]

    axes[1,0].plot(kappa,phi,'rx')
    axes[1,1].plot(i*100+j,source_h5['entry/fft_source/phase'][i,j],'ro')

    print('saving {}'.format(save_fname))
    plt.savefig(save_fname,transparent=True)
    plt.close('all')

    
    
def do_full_plot(args):
    scanname=args[0]

    source_fname= '/hz/data/id13/inhouse10/THEDATA_I10_1/d_2018-07-30_commi_BLISS_aj/PROCESS/vlm/{}/{}_vlm1.h5'.format(scanname,scanname)
    
    with h5py.File(source_fname,'r') as source_h5:

        mapshape = (100,100)

        indexes = np.meshgrid(*[range(x) for x in mapshape],indexing='ij')
        index_list = zip(*[x.flatten() for x in indexes])
        no_frames= len(index_list)

        for i, index in enumerate(index_list[:10]):
            if scanname.find('opscan')>0:
                do_plot_loopscan(scanname, source_h5, i)
            else:
                do_plot_kmap(scanname, source_h5, index)
    
if __name__== '__main__':

    scanname= sys.argv[1]
    do_full_plot([scanname])
    # scanname_list = []
    # scanname_list += ['loopscan_{}'.format(x) for x in range(6,11)]
    # scanname_list += ['dmesh_4']
    # scanname_list += ['kmap_{}'.format(x) for x in [12]]

    # do_plot(scanname_list[0])

    # todo_list = []
    # for scanname in scanname_list:

    #     todo_list.append([scanname])
        
    # do_full_plot(todo_list[0])
    # print(todo_list)
    # pool=Pool(len(todo_list),worker_init(os.getpid()))
    # pool.map(do_full_plot,todo_list)
    # pool.close()
    # pool.join()
                  
