import numpy as np
import scipy.ndimage as nd

def mask_align(align, threshold = 5, alignment = (0,0)):
    'masks the reference and aling array with threshold.\n Aligns both to the alighnment = (1,1) = top - left/n(-1,1) = btm - left/n(1,-1) = top - right/n(-1,-1) = bottom - right corner withot leaving any non-1 space. a value of 0 does not align that direction.\n returns the align array aligned to the first array in the stack and a list of the shift (r[0]-a[0],r[1]-a[1]).'

    
    maskreference = np.where(align[:,:,0] > threshold, 1, 0)
    
    shift = [(0,0)]
    drefcols  = 0

# count 0s for reference 
    if alignment[0]:
        refcols   = maskreference.sum(1)[::alignment[0]]
        i = 0
        while not refcols[i]:        
            drefcols += 1
            i    += 1
    drefrows = 0
    if alignment[1]:
        refrows   = maskreference.sum(0)[::alignment[1]]   
        i        = 0
        while not refrows[i]:        
            drefrows += 1
            i        += 1

    for k in range(1,align.shape[2]):
        kshift = np.zeros(shape=(2))
        maskalign     = np.where(align[:,:,k] > threshold, 1, 0)
        if alignment[0]:
            aligncols = maskalign.sum(1)[::alignment[0]]
            dcols  = 0
            i = 0
            while not aligncols[i]:        
                dcols += 1
                i    += 1
            kshift[0] = dcols - drefcols
        if alignment[1]:
            alignrows = maskalign.sum(0)[::alignment[1]]
            drows  = 0
            i = 0
            while not alignrows[i]:        
                drows += 1
                i    += 1
                kshift[0] = drows - drefrows

        shift.append(kshift)
        align[:,:,k] = nd.shift(align[:,:,k],shift[k])

    return (align, shift)
