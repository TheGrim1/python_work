def parallel_fit_orientation(i,key):
            
        x = azim_units[0,:]
        if key='smooth':
            out = dynamic_threshold(data[i,:],offset,isigma,sigma,medfilt=False)
            azi_slice1d = out[1]
        elif key == 'non_smooth':
            azi_slice1d = data[i,:] 
        else: print 'No keyword set, please check that!'
      
    
        #    plt.plot(x,azi_slice1d)
        starter = fit_orientation_tilman.startparam(x,azi_slice1d)
    
        res = fit_orientation_tilman.do_fit(x,azi_slice1d,starter,thresh)
        #yfit = gmod.eval(x=x,cen=res[6],amp=res[5],wid=res[7],offset=res[8],backg = res[9])
        #res_list[i,0]=np.sum(azi_slice1d)
        print i
        res_list[i,0] = res[0]
        res_list[i,1] = res[1]
        res_list[i,2] = res[2]
        res_list[i,3] = res[3]
        res_list[i,4] = res[4]
        res_list[i,5] = res[5]
        res_list[i,6] = res[6]
        res_list[i,7] = res[7]
        res_list[i,8] = res[8]
        res_list[i,9] = res[9]
        return i, res_list[i,:]
        
    
    
    res_list = np.empty([data.shape[0],10])
    from joblib import Parallel, delayed
    results_parallel = Parallel(n_jobs=20)(delayed(parallel_fit_orientation)(i,key) for i in range(0,data.shape[0]))
    
    
    res_list = np.empty(res_list.shape)
    for i in range (0,len(results_parallel)):
        res_list[i,:] = results_parallel[i][1][:]