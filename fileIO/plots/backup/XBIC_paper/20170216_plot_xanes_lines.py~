

import h5py
import numpy as np
import matplotlib.pyplot as plt
import scipy.ndimage as nd
import matplotlib.colors as colors



def main():


    ### reading data
    fname200 = '/tmp_14_days/johannes1/results/MG154_fluoXAS_1_200ms_Ga/MG154_fluoXAS_1.replace.h5'
    fname400 = '/tmp_14_days/johannes1/results/MG154_fluoXAS_1_400ms_Ga/MG154_fluoXAS_1.replace.h5'
    
    h5f200    = h5py.File(fname200,'r')

    ga200     = np.asarray(h5f200['/detectorsum/Ga-K_norm_stan/data'])[::-1,::-1,:]
    step200   = np.asarray(h5f200['/detectorsum/Ga-K_norm_stan/xanes_step'])[::-1,::-1]
    edge200   = np.asarray(h5f200['/detectorsum/Ga-K_norm_stan/xanes_edge'])[::-1,::-1]
    xbic200   = np.asarray(h5f200['/counters/zap_p201_Xbic_norm/data'])[::-1,::-1,:]
    mask200   = np.where(step200[:,:] > 5e-9,1,0)
    energy200 = np.asarray(h5f200['/detectorsum/Ga-K_norm_stan/energy'])

    h5f200.close()
    
    h5f400    = h5py.File(fname400,'r')   
    ga400     = np.asarray(h5f400['/detectorsum/Ga-K_norm_stan/data'])[::-1,::-1,:]
    step400   = np.asarray(h5f400['/detectorsum/Ga-K_norm_stan/xanes_step'])[::-1,::-1]
    edge400   = np.asarray(h5f400['/detectorsum/Ga-K_norm_stan/xanes_edge'])[::-1,::-1]
    mask400   = np.where(step400[:,:] > 12e-9,1,0)
    energy400 = np.asarray(h5f400['/detectorsum/Ga-K_norm_stan/energy'])

    h5f400.close()

    ### preparing what to plot:
    dataheader  = ['energy [keV]']
    data1       = np.zeros(shape = (len(ga400[1,1,:]), np.sum(mask400) + 1))
    data1[:,0]  = energy400


#    plt.matshow(mask400)
#    plt.show()
    

    for i, y in enumerate(np.where(mask400)[0]):
        x = np.where(mask400)[1][i]
        dataheader.append([y,x])
        data1[:,i+1] = ga400[y,x,:] 
        
        
    ### plotting
    fig, ax1 = plt.subplots()

    energyrange = [15,44]
    energy2d   = np.atleast_1d(energy400[energyrange[0]:energyrange[1]])
    data1      = data1[energyrange[0]:energyrange[1],:]
    order      = [(y - x) for [y,x] in dataheader[1::]]

    order      = zip(order,range(1,len(order)+1))

    dataordered= np.zeros(shape=data1.shape)
    order      = sorted(order)
    newheader  = [dataheader[0]]
    

    for i, (position, j) in enumerate(order):
        dataordered[:,i+1] = data1[:,j]
        newheader.append([dataheader[j],position])

    data1[:,1::] = dataordered[:,1::]
    dataheader = newheader
    position = ['position x=%s, y = %s, l = %s' % (x,y,l) for [[y,x],l] in dataheader[1::]]
    colorref = [(l-0.5)/10.0 for  [[y,x],l] in dataheader[1::]]
    cmap = plt.get_cmap('coolwarm')
    
    print colorref
    for i in range(len(data1[1,1::])):
        ax1.plot(energy2d, data1[:,i+1], 'b-', label = position[i],color = cmap(colorref[i]), linewidth = 2)
#    ax1.legend()

    ax1.set_xticklabels(['{:d}'.format(int(x*1000)) for x in ax1.get_xticks()])
    ax1.set_xlabel('energy [eV]')
    ax1.set_ylabel('standardized XANES signal')

    fig.tight_layout()
    savename = '/data/id13/inhouse2/AJ/skript/fileIO/plots/backup/20170216_plot_xanes_lines/xanes_lines'
    plt.savefig(savename + '.svg', transparent=True)
    plt.savefig(savename + '.png', transparent=True)
    plt.savefig(savename + '.eps', transparent=True)
    plt.savefig(savename + '.pdf', transparent=True)
    plt.show()

    
    ### inset
    insetshape = (max(np.where(mask400)[0])-min(np.where(mask400)[0])+1,
                  max(np.where(mask400)[1])-min(np.where(mask400)[1])+1)

    image = np.zeros(shape = insetshape)
    for [[y,x],l] in dataheader[1::]:
        image[y - min(np.where(mask400)[0]),
              x - min(np.where(mask400)[1])] = l

    plt.matshow(image, cmap = cmap)
    fig.tight_layout()
    savename = savename+'inset'
    plt.savefig(savename + '.svg', transparent=True)
    plt.savefig(savename + '.png', transparent=True)
    plt.savefig(savename + '.eps', transparent=True)
    plt.savefig(savename + '.pdf', transparent=True)
    
    plt.show()


    ### savedata
    
    ### savedata
    savefile = savename + '.dat'
    savelines = ['\t'.join([str(x) for x in dataheader] + ['\n'])]
    for line in data1:
        savelines.append('\t'.join([str(x) for x in line] + ['\n']))

    print savelines
    f = open(savefile, 'w')
    f.writelines(savelines)
    f.close()

if __name__ == "__main__":
    main()
