
# global imports

import sys, os
import matplotlib.pyplot as plt
import time
from matplotlib.colors import LogNorm

# local imports
from open_edf import open_edf

def plot_edf(data,
            index    = 0,
            savename = "/savename.jpg",
            title    = "Title"):
    dimension = len(data.shape)
#    print "dimension of data to be plotted is %s" % dimension

    ax1 = plt.subplot(1,1,1,axisbg = (0.9, 0.9, 0.95))
    ax1.figure.set_size_inches(1,5)
    if dimension == 3:
#        ax1.imshow(data[index,:,:], interpolation = 'none')
        ax1.pcolor(data[index,:,:], norm=LogNorm(vmin=0, vmax=200), cmap='PuBu_r')
    elif dimension == 2:
        ax1.pcolor(data[:,:], norm=LogNorm(vmin=max(data.min(),0.0001),vmax=max(data.max(),0.01)), cmap='OrRd')
#        ax1.imshow(data[:,:], interpolation = 'none')
    elif dimension not in (2,3):
        print "invalid data for plotting \ntitle  : %s\n%s" % (title, dimension)
#    plt.clim(0,0.001)
    plt.tight_layout()
    ax1.set_xticks([])
    ax1.set_xticklabels([])
    ax1.set_yticks([])
    ax1.set_yticklabels([])

## draw some lines in the midle of FOV

#    print ax1.get_ylim()
    
#    ax1.plot((20,20), (0,40) ,color = "black", linewidth = 0.5)
    
    ax1.plot((13,0), (60,60) ,color = "black", linewidth = 0.5)
    ax1.plot((13,0), (120,120) ,color = "black", linewidth = 0.5)
    ax1.plot((13,0), (180,180) ,color = "black", linewidth = 0.5)
    


    plt.savefig(savename, transparent = True, bbox_incens = "tight")
     


    plt.show()
    plt.close()
    
#    plt.savefig(savename,transparent = True, bbox_incens = "tight")
    
    plt.title(title)


def plotmany_edf(data):
    plt.imshow(data[0,:,:], interpolation = "none")
    plt.clim(0,1000)
    plt.figure(figsize=(10,10))


    title     = "Plotting image no %s of %s" 
    plt.title(title % (0, 0))
    plt.ion()
    
    nimages = data.shape[0]

    for i in range(0,nimages):
        time.sleep(.1)
        plt.title(title % (i, nimages))
        plt.imshow(data[i,:,:])
#        plt.clim(0,10)
        plt.draw()

        

def main(args):
# also does the plotting
    
    for fname in args:
        data = open_edf(fname,threshold = 5000000)
        if data.ndim != 2:
            plotmany_edf(data)
        else:
            plot_edf(data, title = os.path.basename(fname))

if __name__ == '__main__':
  
    usage =""" \n1) python <thisfile.py> <arg1> <arg2> etc. 
\n2) python <thisfile.py> -f <file containing args as lines> 
\n3) find <*yoursearch* -> arg1 etc.> | python <thisfile.py> 
"""
  
    args = []
    if len(sys.argv) > 1:
        if sys.argv[1].find("-f")!= -1:
            f = open(sys.argv[2]) 
            for line in f:
                args.append(line.rstrip())
        else:
            args=sys.argv[1:]
    else:
        f = sys.stdin
        for line in f:
            args.append(line.rstrip())
    
#    print args
    main(args)
